/*
 * Generated by gdbus-codegen 2.51.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SRC_XDG_DESKTOP_PORTAL_DBUS_H__
#define __SRC_XDG_DESKTOP_PORTAL_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Request */

#define XDP_IMPL_TYPE_REQUEST (xdp_impl_request_get_type ())
#define XDP_IMPL_REQUEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_REQUEST, XdpImplRequest))
#define XDP_IMPL_IS_REQUEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_REQUEST))
#define XDP_IMPL_REQUEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_REQUEST, XdpImplRequestIface))

struct _XdpImplRequest;
typedef struct _XdpImplRequest XdpImplRequest;
typedef struct _XdpImplRequestIface XdpImplRequestIface;

struct _XdpImplRequestIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_close) (
    XdpImplRequest *object,
    GDBusMethodInvocation *invocation);

};

GType xdp_impl_request_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_request_interface_info (void);
guint xdp_impl_request_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_request_complete_close (
    XdpImplRequest *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xdp_impl_request_call_close (
    XdpImplRequest *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_request_call_close_finish (
    XdpImplRequest *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_request_call_close_sync (
    XdpImplRequest *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_REQUEST_PROXY (xdp_impl_request_proxy_get_type ())
#define XDP_IMPL_REQUEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_REQUEST_PROXY, XdpImplRequestProxy))
#define XDP_IMPL_REQUEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_REQUEST_PROXY, XdpImplRequestProxyClass))
#define XDP_IMPL_REQUEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_REQUEST_PROXY, XdpImplRequestProxyClass))
#define XDP_IMPL_IS_REQUEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_REQUEST_PROXY))
#define XDP_IMPL_IS_REQUEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_REQUEST_PROXY))

typedef struct _XdpImplRequestProxy XdpImplRequestProxy;
typedef struct _XdpImplRequestProxyClass XdpImplRequestProxyClass;
typedef struct _XdpImplRequestProxyPrivate XdpImplRequestProxyPrivate;

struct _XdpImplRequestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplRequestProxyPrivate *priv;
};

struct _XdpImplRequestProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_request_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplRequestProxy, g_object_unref)
#endif

void xdp_impl_request_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplRequest *xdp_impl_request_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplRequest *xdp_impl_request_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_request_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplRequest *xdp_impl_request_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplRequest *xdp_impl_request_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_REQUEST_SKELETON (xdp_impl_request_skeleton_get_type ())
#define XDP_IMPL_REQUEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_REQUEST_SKELETON, XdpImplRequestSkeleton))
#define XDP_IMPL_REQUEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_REQUEST_SKELETON, XdpImplRequestSkeletonClass))
#define XDP_IMPL_REQUEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_REQUEST_SKELETON, XdpImplRequestSkeletonClass))
#define XDP_IMPL_IS_REQUEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_REQUEST_SKELETON))
#define XDP_IMPL_IS_REQUEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_REQUEST_SKELETON))

typedef struct _XdpImplRequestSkeleton XdpImplRequestSkeleton;
typedef struct _XdpImplRequestSkeletonClass XdpImplRequestSkeletonClass;
typedef struct _XdpImplRequestSkeletonPrivate XdpImplRequestSkeletonPrivate;

struct _XdpImplRequestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplRequestSkeletonPrivate *priv;
};

struct _XdpImplRequestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_request_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplRequestSkeleton, g_object_unref)
#endif

XdpImplRequest *xdp_impl_request_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.FileChooser */

#define XDP_IMPL_TYPE_FILE_CHOOSER (xdp_impl_file_chooser_get_type ())
#define XDP_IMPL_FILE_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_FILE_CHOOSER, XdpImplFileChooser))
#define XDP_IMPL_IS_FILE_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_FILE_CHOOSER))
#define XDP_IMPL_FILE_CHOOSER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_FILE_CHOOSER, XdpImplFileChooserIface))

struct _XdpImplFileChooser;
typedef struct _XdpImplFileChooser XdpImplFileChooser;
typedef struct _XdpImplFileChooserIface XdpImplFileChooserIface;

struct _XdpImplFileChooserIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_open_file) (
    XdpImplFileChooser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options);

  gboolean (*handle_save_file) (
    XdpImplFileChooser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options);

};

GType xdp_impl_file_chooser_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_file_chooser_interface_info (void);
guint xdp_impl_file_chooser_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_file_chooser_complete_open_file (
    XdpImplFileChooser *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);

void xdp_impl_file_chooser_complete_save_file (
    XdpImplFileChooser *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_file_chooser_call_open_file (
    XdpImplFileChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_file_chooser_call_open_file_finish (
    XdpImplFileChooser *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_file_chooser_call_open_file_sync (
    XdpImplFileChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);

void xdp_impl_file_chooser_call_save_file (
    XdpImplFileChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_file_chooser_call_save_file_finish (
    XdpImplFileChooser *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_file_chooser_call_save_file_sync (
    XdpImplFileChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_FILE_CHOOSER_PROXY (xdp_impl_file_chooser_proxy_get_type ())
#define XDP_IMPL_FILE_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_FILE_CHOOSER_PROXY, XdpImplFileChooserProxy))
#define XDP_IMPL_FILE_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_FILE_CHOOSER_PROXY, XdpImplFileChooserProxyClass))
#define XDP_IMPL_FILE_CHOOSER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_FILE_CHOOSER_PROXY, XdpImplFileChooserProxyClass))
#define XDP_IMPL_IS_FILE_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_FILE_CHOOSER_PROXY))
#define XDP_IMPL_IS_FILE_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_FILE_CHOOSER_PROXY))

typedef struct _XdpImplFileChooserProxy XdpImplFileChooserProxy;
typedef struct _XdpImplFileChooserProxyClass XdpImplFileChooserProxyClass;
typedef struct _XdpImplFileChooserProxyPrivate XdpImplFileChooserProxyPrivate;

struct _XdpImplFileChooserProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplFileChooserProxyPrivate *priv;
};

struct _XdpImplFileChooserProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_file_chooser_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplFileChooserProxy, g_object_unref)
#endif

void xdp_impl_file_chooser_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplFileChooser *xdp_impl_file_chooser_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplFileChooser *xdp_impl_file_chooser_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_file_chooser_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplFileChooser *xdp_impl_file_chooser_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplFileChooser *xdp_impl_file_chooser_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON (xdp_impl_file_chooser_skeleton_get_type ())
#define XDP_IMPL_FILE_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON, XdpImplFileChooserSkeleton))
#define XDP_IMPL_FILE_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON, XdpImplFileChooserSkeletonClass))
#define XDP_IMPL_FILE_CHOOSER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON, XdpImplFileChooserSkeletonClass))
#define XDP_IMPL_IS_FILE_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON))
#define XDP_IMPL_IS_FILE_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_FILE_CHOOSER_SKELETON))

typedef struct _XdpImplFileChooserSkeleton XdpImplFileChooserSkeleton;
typedef struct _XdpImplFileChooserSkeletonClass XdpImplFileChooserSkeletonClass;
typedef struct _XdpImplFileChooserSkeletonPrivate XdpImplFileChooserSkeletonPrivate;

struct _XdpImplFileChooserSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplFileChooserSkeletonPrivate *priv;
};

struct _XdpImplFileChooserSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_file_chooser_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplFileChooserSkeleton, g_object_unref)
#endif

XdpImplFileChooser *xdp_impl_file_chooser_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.AppChooser */

#define XDP_IMPL_TYPE_APP_CHOOSER (xdp_impl_app_chooser_get_type ())
#define XDP_IMPL_APP_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_APP_CHOOSER, XdpImplAppChooser))
#define XDP_IMPL_IS_APP_CHOOSER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_APP_CHOOSER))
#define XDP_IMPL_APP_CHOOSER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_APP_CHOOSER, XdpImplAppChooserIface))

struct _XdpImplAppChooser;
typedef struct _XdpImplAppChooser XdpImplAppChooser;
typedef struct _XdpImplAppChooserIface XdpImplAppChooserIface;

struct _XdpImplAppChooserIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_choose_application) (
    XdpImplAppChooser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *const *arg_choices,
    GVariant *arg_options);

};

GType xdp_impl_app_chooser_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_app_chooser_interface_info (void);
guint xdp_impl_app_chooser_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_app_chooser_complete_choose_application (
    XdpImplAppChooser *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_app_chooser_call_choose_application (
    XdpImplAppChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *const *arg_choices,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_app_chooser_call_choose_application_finish (
    XdpImplAppChooser *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_app_chooser_call_choose_application_sync (
    XdpImplAppChooser *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *const *arg_choices,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_APP_CHOOSER_PROXY (xdp_impl_app_chooser_proxy_get_type ())
#define XDP_IMPL_APP_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_APP_CHOOSER_PROXY, XdpImplAppChooserProxy))
#define XDP_IMPL_APP_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_APP_CHOOSER_PROXY, XdpImplAppChooserProxyClass))
#define XDP_IMPL_APP_CHOOSER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_APP_CHOOSER_PROXY, XdpImplAppChooserProxyClass))
#define XDP_IMPL_IS_APP_CHOOSER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_APP_CHOOSER_PROXY))
#define XDP_IMPL_IS_APP_CHOOSER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_APP_CHOOSER_PROXY))

typedef struct _XdpImplAppChooserProxy XdpImplAppChooserProxy;
typedef struct _XdpImplAppChooserProxyClass XdpImplAppChooserProxyClass;
typedef struct _XdpImplAppChooserProxyPrivate XdpImplAppChooserProxyPrivate;

struct _XdpImplAppChooserProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplAppChooserProxyPrivate *priv;
};

struct _XdpImplAppChooserProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_app_chooser_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAppChooserProxy, g_object_unref)
#endif

void xdp_impl_app_chooser_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAppChooser *xdp_impl_app_chooser_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAppChooser *xdp_impl_app_chooser_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_app_chooser_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAppChooser *xdp_impl_app_chooser_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAppChooser *xdp_impl_app_chooser_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_APP_CHOOSER_SKELETON (xdp_impl_app_chooser_skeleton_get_type ())
#define XDP_IMPL_APP_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_APP_CHOOSER_SKELETON, XdpImplAppChooserSkeleton))
#define XDP_IMPL_APP_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_APP_CHOOSER_SKELETON, XdpImplAppChooserSkeletonClass))
#define XDP_IMPL_APP_CHOOSER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_APP_CHOOSER_SKELETON, XdpImplAppChooserSkeletonClass))
#define XDP_IMPL_IS_APP_CHOOSER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_APP_CHOOSER_SKELETON))
#define XDP_IMPL_IS_APP_CHOOSER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_APP_CHOOSER_SKELETON))

typedef struct _XdpImplAppChooserSkeleton XdpImplAppChooserSkeleton;
typedef struct _XdpImplAppChooserSkeletonClass XdpImplAppChooserSkeletonClass;
typedef struct _XdpImplAppChooserSkeletonPrivate XdpImplAppChooserSkeletonPrivate;

struct _XdpImplAppChooserSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplAppChooserSkeletonPrivate *priv;
};

struct _XdpImplAppChooserSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_app_chooser_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAppChooserSkeleton, g_object_unref)
#endif

XdpImplAppChooser *xdp_impl_app_chooser_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Print */

#define XDP_IMPL_TYPE_PRINT (xdp_impl_print_get_type ())
#define XDP_IMPL_PRINT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_PRINT, XdpImplPrint))
#define XDP_IMPL_IS_PRINT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_PRINT))
#define XDP_IMPL_PRINT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_PRINT, XdpImplPrintIface))

struct _XdpImplPrint;
typedef struct _XdpImplPrint XdpImplPrint;
typedef struct _XdpImplPrintIface XdpImplPrintIface;

struct _XdpImplPrintIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_prepare_print) (
    XdpImplPrint *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_settings,
    GVariant *arg_page_setup,
    GVariant *arg_options);

  gboolean (*handle_print) (
    XdpImplPrint *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_fd,
    GVariant *arg_options);

};

GType xdp_impl_print_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_print_interface_info (void);
guint xdp_impl_print_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_print_complete_print (
    XdpImplPrint *object,
    GDBusMethodInvocation *invocation,
    GUnixFDList *fd_list,
    guint response,
    GVariant *results);

void xdp_impl_print_complete_prepare_print (
    XdpImplPrint *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_print_call_print (
    XdpImplPrint *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_fd,
    GVariant *arg_options,
    GUnixFDList *fd_list,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_print_call_print_finish (
    XdpImplPrint *proxy,
    guint *out_response,
    GVariant **out_results,
    GUnixFDList **out_fd_list,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_print_call_print_sync (
    XdpImplPrint *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_fd,
    GVariant *arg_options,
    GUnixFDList  *fd_list,
    guint *out_response,
    GVariant **out_results,
    GUnixFDList **out_fd_list,
    GCancellable *cancellable,
    GError **error);

void xdp_impl_print_call_prepare_print (
    XdpImplPrint *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_settings,
    GVariant *arg_page_setup,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_print_call_prepare_print_finish (
    XdpImplPrint *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_print_call_prepare_print_sync (
    XdpImplPrint *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    GVariant *arg_settings,
    GVariant *arg_page_setup,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_PRINT_PROXY (xdp_impl_print_proxy_get_type ())
#define XDP_IMPL_PRINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_PRINT_PROXY, XdpImplPrintProxy))
#define XDP_IMPL_PRINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_PRINT_PROXY, XdpImplPrintProxyClass))
#define XDP_IMPL_PRINT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_PRINT_PROXY, XdpImplPrintProxyClass))
#define XDP_IMPL_IS_PRINT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_PRINT_PROXY))
#define XDP_IMPL_IS_PRINT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_PRINT_PROXY))

typedef struct _XdpImplPrintProxy XdpImplPrintProxy;
typedef struct _XdpImplPrintProxyClass XdpImplPrintProxyClass;
typedef struct _XdpImplPrintProxyPrivate XdpImplPrintProxyPrivate;

struct _XdpImplPrintProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplPrintProxyPrivate *priv;
};

struct _XdpImplPrintProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_print_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplPrintProxy, g_object_unref)
#endif

void xdp_impl_print_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplPrint *xdp_impl_print_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplPrint *xdp_impl_print_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_print_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplPrint *xdp_impl_print_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplPrint *xdp_impl_print_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_PRINT_SKELETON (xdp_impl_print_skeleton_get_type ())
#define XDP_IMPL_PRINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_PRINT_SKELETON, XdpImplPrintSkeleton))
#define XDP_IMPL_PRINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_PRINT_SKELETON, XdpImplPrintSkeletonClass))
#define XDP_IMPL_PRINT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_PRINT_SKELETON, XdpImplPrintSkeletonClass))
#define XDP_IMPL_IS_PRINT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_PRINT_SKELETON))
#define XDP_IMPL_IS_PRINT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_PRINT_SKELETON))

typedef struct _XdpImplPrintSkeleton XdpImplPrintSkeleton;
typedef struct _XdpImplPrintSkeletonClass XdpImplPrintSkeletonClass;
typedef struct _XdpImplPrintSkeletonPrivate XdpImplPrintSkeletonPrivate;

struct _XdpImplPrintSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplPrintSkeletonPrivate *priv;
};

struct _XdpImplPrintSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_print_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplPrintSkeleton, g_object_unref)
#endif

XdpImplPrint *xdp_impl_print_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Screenshot */

#define XDP_IMPL_TYPE_SCREENSHOT (xdp_impl_screenshot_get_type ())
#define XDP_IMPL_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_SCREENSHOT, XdpImplScreenshot))
#define XDP_IMPL_IS_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_SCREENSHOT))
#define XDP_IMPL_SCREENSHOT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_SCREENSHOT, XdpImplScreenshotIface))

struct _XdpImplScreenshot;
typedef struct _XdpImplScreenshot XdpImplScreenshot;
typedef struct _XdpImplScreenshotIface XdpImplScreenshotIface;

struct _XdpImplScreenshotIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_screenshot) (
    XdpImplScreenshot *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    GVariant *arg_options);

};

GType xdp_impl_screenshot_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_screenshot_interface_info (void);
guint xdp_impl_screenshot_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_screenshot_complete_screenshot (
    XdpImplScreenshot *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_screenshot_call_screenshot (
    XdpImplScreenshot *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_screenshot_call_screenshot_finish (
    XdpImplScreenshot *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_screenshot_call_screenshot_sync (
    XdpImplScreenshot *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_SCREENSHOT_PROXY (xdp_impl_screenshot_proxy_get_type ())
#define XDP_IMPL_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_SCREENSHOT_PROXY, XdpImplScreenshotProxy))
#define XDP_IMPL_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_SCREENSHOT_PROXY, XdpImplScreenshotProxyClass))
#define XDP_IMPL_SCREENSHOT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_SCREENSHOT_PROXY, XdpImplScreenshotProxyClass))
#define XDP_IMPL_IS_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_SCREENSHOT_PROXY))
#define XDP_IMPL_IS_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_SCREENSHOT_PROXY))

typedef struct _XdpImplScreenshotProxy XdpImplScreenshotProxy;
typedef struct _XdpImplScreenshotProxyClass XdpImplScreenshotProxyClass;
typedef struct _XdpImplScreenshotProxyPrivate XdpImplScreenshotProxyPrivate;

struct _XdpImplScreenshotProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplScreenshotProxyPrivate *priv;
};

struct _XdpImplScreenshotProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_screenshot_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplScreenshotProxy, g_object_unref)
#endif

void xdp_impl_screenshot_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplScreenshot *xdp_impl_screenshot_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplScreenshot *xdp_impl_screenshot_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_screenshot_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplScreenshot *xdp_impl_screenshot_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplScreenshot *xdp_impl_screenshot_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_SCREENSHOT_SKELETON (xdp_impl_screenshot_skeleton_get_type ())
#define XDP_IMPL_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_SCREENSHOT_SKELETON, XdpImplScreenshotSkeleton))
#define XDP_IMPL_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_SCREENSHOT_SKELETON, XdpImplScreenshotSkeletonClass))
#define XDP_IMPL_SCREENSHOT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_SCREENSHOT_SKELETON, XdpImplScreenshotSkeletonClass))
#define XDP_IMPL_IS_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_SCREENSHOT_SKELETON))
#define XDP_IMPL_IS_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_SCREENSHOT_SKELETON))

typedef struct _XdpImplScreenshotSkeleton XdpImplScreenshotSkeleton;
typedef struct _XdpImplScreenshotSkeletonClass XdpImplScreenshotSkeletonClass;
typedef struct _XdpImplScreenshotSkeletonPrivate XdpImplScreenshotSkeletonPrivate;

struct _XdpImplScreenshotSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplScreenshotSkeletonPrivate *priv;
};

struct _XdpImplScreenshotSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_screenshot_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplScreenshotSkeleton, g_object_unref)
#endif

XdpImplScreenshot *xdp_impl_screenshot_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Notification */

#define XDP_IMPL_TYPE_NOTIFICATION (xdp_impl_notification_get_type ())
#define XDP_IMPL_NOTIFICATION(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_NOTIFICATION, XdpImplNotification))
#define XDP_IMPL_IS_NOTIFICATION(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_NOTIFICATION))
#define XDP_IMPL_NOTIFICATION_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_NOTIFICATION, XdpImplNotificationIface))

struct _XdpImplNotification;
typedef struct _XdpImplNotification XdpImplNotification;
typedef struct _XdpImplNotificationIface XdpImplNotificationIface;

struct _XdpImplNotificationIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_add_notification) (
    XdpImplNotification *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification);

  gboolean (*handle_remove_notification) (
    XdpImplNotification *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_id);

  void (*action_invoked) (
    XdpImplNotification *object,
    const gchar *arg_app_id,
    const gchar *arg_id,
    const gchar *arg_action,
    GVariant *arg_parameter);

};

GType xdp_impl_notification_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_notification_interface_info (void);
guint xdp_impl_notification_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_notification_complete_add_notification (
    XdpImplNotification *object,
    GDBusMethodInvocation *invocation);

void xdp_impl_notification_complete_remove_notification (
    XdpImplNotification *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void xdp_impl_notification_emit_action_invoked (
    XdpImplNotification *object,
    const gchar *arg_app_id,
    const gchar *arg_id,
    const gchar *arg_action,
    GVariant *arg_parameter);



/* D-Bus method calls: */
void xdp_impl_notification_call_add_notification (
    XdpImplNotification *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_notification_call_add_notification_finish (
    XdpImplNotification *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_notification_call_add_notification_sync (
    XdpImplNotification *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification,
    GCancellable *cancellable,
    GError **error);

void xdp_impl_notification_call_remove_notification (
    XdpImplNotification *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_notification_call_remove_notification_finish (
    XdpImplNotification *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_notification_call_remove_notification_sync (
    XdpImplNotification *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_NOTIFICATION_PROXY (xdp_impl_notification_proxy_get_type ())
#define XDP_IMPL_NOTIFICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_NOTIFICATION_PROXY, XdpImplNotificationProxy))
#define XDP_IMPL_NOTIFICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_NOTIFICATION_PROXY, XdpImplNotificationProxyClass))
#define XDP_IMPL_NOTIFICATION_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_NOTIFICATION_PROXY, XdpImplNotificationProxyClass))
#define XDP_IMPL_IS_NOTIFICATION_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_NOTIFICATION_PROXY))
#define XDP_IMPL_IS_NOTIFICATION_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_NOTIFICATION_PROXY))

typedef struct _XdpImplNotificationProxy XdpImplNotificationProxy;
typedef struct _XdpImplNotificationProxyClass XdpImplNotificationProxyClass;
typedef struct _XdpImplNotificationProxyPrivate XdpImplNotificationProxyPrivate;

struct _XdpImplNotificationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplNotificationProxyPrivate *priv;
};

struct _XdpImplNotificationProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_notification_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplNotificationProxy, g_object_unref)
#endif

void xdp_impl_notification_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplNotification *xdp_impl_notification_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplNotification *xdp_impl_notification_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_notification_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplNotification *xdp_impl_notification_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplNotification *xdp_impl_notification_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_NOTIFICATION_SKELETON (xdp_impl_notification_skeleton_get_type ())
#define XDP_IMPL_NOTIFICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_NOTIFICATION_SKELETON, XdpImplNotificationSkeleton))
#define XDP_IMPL_NOTIFICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_NOTIFICATION_SKELETON, XdpImplNotificationSkeletonClass))
#define XDP_IMPL_NOTIFICATION_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_NOTIFICATION_SKELETON, XdpImplNotificationSkeletonClass))
#define XDP_IMPL_IS_NOTIFICATION_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_NOTIFICATION_SKELETON))
#define XDP_IMPL_IS_NOTIFICATION_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_NOTIFICATION_SKELETON))

typedef struct _XdpImplNotificationSkeleton XdpImplNotificationSkeleton;
typedef struct _XdpImplNotificationSkeletonClass XdpImplNotificationSkeletonClass;
typedef struct _XdpImplNotificationSkeletonPrivate XdpImplNotificationSkeletonPrivate;

struct _XdpImplNotificationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplNotificationSkeletonPrivate *priv;
};

struct _XdpImplNotificationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_notification_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplNotificationSkeleton, g_object_unref)
#endif

XdpImplNotification *xdp_impl_notification_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Inhibit */

#define XDP_IMPL_TYPE_INHIBIT (xdp_impl_inhibit_get_type ())
#define XDP_IMPL_INHIBIT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_INHIBIT, XdpImplInhibit))
#define XDP_IMPL_IS_INHIBIT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_INHIBIT))
#define XDP_IMPL_INHIBIT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_INHIBIT, XdpImplInhibitIface))

struct _XdpImplInhibit;
typedef struct _XdpImplInhibit XdpImplInhibit;
typedef struct _XdpImplInhibitIface XdpImplInhibitIface;

struct _XdpImplInhibitIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_inhibit) (
    XdpImplInhibit *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    guint arg_flags,
    GVariant *arg_options);

};

GType xdp_impl_inhibit_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_inhibit_interface_info (void);
guint xdp_impl_inhibit_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_inhibit_complete_inhibit (
    XdpImplInhibit *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void xdp_impl_inhibit_call_inhibit (
    XdpImplInhibit *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    guint arg_flags,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_inhibit_call_inhibit_finish (
    XdpImplInhibit *proxy,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_inhibit_call_inhibit_sync (
    XdpImplInhibit *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    guint arg_flags,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_INHIBIT_PROXY (xdp_impl_inhibit_proxy_get_type ())
#define XDP_IMPL_INHIBIT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_INHIBIT_PROXY, XdpImplInhibitProxy))
#define XDP_IMPL_INHIBIT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_INHIBIT_PROXY, XdpImplInhibitProxyClass))
#define XDP_IMPL_INHIBIT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_INHIBIT_PROXY, XdpImplInhibitProxyClass))
#define XDP_IMPL_IS_INHIBIT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_INHIBIT_PROXY))
#define XDP_IMPL_IS_INHIBIT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_INHIBIT_PROXY))

typedef struct _XdpImplInhibitProxy XdpImplInhibitProxy;
typedef struct _XdpImplInhibitProxyClass XdpImplInhibitProxyClass;
typedef struct _XdpImplInhibitProxyPrivate XdpImplInhibitProxyPrivate;

struct _XdpImplInhibitProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplInhibitProxyPrivate *priv;
};

struct _XdpImplInhibitProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_inhibit_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplInhibitProxy, g_object_unref)
#endif

void xdp_impl_inhibit_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplInhibit *xdp_impl_inhibit_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplInhibit *xdp_impl_inhibit_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_inhibit_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplInhibit *xdp_impl_inhibit_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplInhibit *xdp_impl_inhibit_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_INHIBIT_SKELETON (xdp_impl_inhibit_skeleton_get_type ())
#define XDP_IMPL_INHIBIT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_INHIBIT_SKELETON, XdpImplInhibitSkeleton))
#define XDP_IMPL_INHIBIT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_INHIBIT_SKELETON, XdpImplInhibitSkeletonClass))
#define XDP_IMPL_INHIBIT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_INHIBIT_SKELETON, XdpImplInhibitSkeletonClass))
#define XDP_IMPL_IS_INHIBIT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_INHIBIT_SKELETON))
#define XDP_IMPL_IS_INHIBIT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_INHIBIT_SKELETON))

typedef struct _XdpImplInhibitSkeleton XdpImplInhibitSkeleton;
typedef struct _XdpImplInhibitSkeletonClass XdpImplInhibitSkeletonClass;
typedef struct _XdpImplInhibitSkeletonPrivate XdpImplInhibitSkeletonPrivate;

struct _XdpImplInhibitSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplInhibitSkeletonPrivate *priv;
};

struct _XdpImplInhibitSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_inhibit_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplInhibitSkeleton, g_object_unref)
#endif

XdpImplInhibit *xdp_impl_inhibit_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Access */

#define XDP_IMPL_TYPE_ACCESS (xdp_impl_access_get_type ())
#define XDP_IMPL_ACCESS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCESS, XdpImplAccess))
#define XDP_IMPL_IS_ACCESS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCESS))
#define XDP_IMPL_ACCESS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_ACCESS, XdpImplAccessIface))

struct _XdpImplAccess;
typedef struct _XdpImplAccess XdpImplAccess;
typedef struct _XdpImplAccessIface XdpImplAccessIface;

struct _XdpImplAccessIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_access_dialog) (
    XdpImplAccess *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    const gchar *arg_subtitle,
    const gchar *arg_body,
    GVariant *arg_options);

};

GType xdp_impl_access_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_access_interface_info (void);
guint xdp_impl_access_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_access_complete_access_dialog (
    XdpImplAccess *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_access_call_access_dialog (
    XdpImplAccess *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    const gchar *arg_subtitle,
    const gchar *arg_body,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_access_call_access_dialog_finish (
    XdpImplAccess *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_access_call_access_dialog_sync (
    XdpImplAccess *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_parent_window,
    const gchar *arg_title,
    const gchar *arg_subtitle,
    const gchar *arg_body,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_ACCESS_PROXY (xdp_impl_access_proxy_get_type ())
#define XDP_IMPL_ACCESS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCESS_PROXY, XdpImplAccessProxy))
#define XDP_IMPL_ACCESS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_ACCESS_PROXY, XdpImplAccessProxyClass))
#define XDP_IMPL_ACCESS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_ACCESS_PROXY, XdpImplAccessProxyClass))
#define XDP_IMPL_IS_ACCESS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCESS_PROXY))
#define XDP_IMPL_IS_ACCESS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_ACCESS_PROXY))

typedef struct _XdpImplAccessProxy XdpImplAccessProxy;
typedef struct _XdpImplAccessProxyClass XdpImplAccessProxyClass;
typedef struct _XdpImplAccessProxyPrivate XdpImplAccessProxyPrivate;

struct _XdpImplAccessProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplAccessProxyPrivate *priv;
};

struct _XdpImplAccessProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_access_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAccessProxy, g_object_unref)
#endif

void xdp_impl_access_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAccess *xdp_impl_access_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAccess *xdp_impl_access_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_access_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAccess *xdp_impl_access_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAccess *xdp_impl_access_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_ACCESS_SKELETON (xdp_impl_access_skeleton_get_type ())
#define XDP_IMPL_ACCESS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCESS_SKELETON, XdpImplAccessSkeleton))
#define XDP_IMPL_ACCESS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_ACCESS_SKELETON, XdpImplAccessSkeletonClass))
#define XDP_IMPL_ACCESS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_ACCESS_SKELETON, XdpImplAccessSkeletonClass))
#define XDP_IMPL_IS_ACCESS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCESS_SKELETON))
#define XDP_IMPL_IS_ACCESS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_ACCESS_SKELETON))

typedef struct _XdpImplAccessSkeleton XdpImplAccessSkeleton;
typedef struct _XdpImplAccessSkeletonClass XdpImplAccessSkeletonClass;
typedef struct _XdpImplAccessSkeletonPrivate XdpImplAccessSkeletonPrivate;

struct _XdpImplAccessSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplAccessSkeletonPrivate *priv;
};

struct _XdpImplAccessSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_access_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAccessSkeleton, g_object_unref)
#endif

XdpImplAccess *xdp_impl_access_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.impl.portal.Account */

#define XDP_IMPL_TYPE_ACCOUNT (xdp_impl_account_get_type ())
#define XDP_IMPL_ACCOUNT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCOUNT, XdpImplAccount))
#define XDP_IMPL_IS_ACCOUNT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCOUNT))
#define XDP_IMPL_ACCOUNT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), XDP_IMPL_TYPE_ACCOUNT, XdpImplAccountIface))

struct _XdpImplAccount;
typedef struct _XdpImplAccount XdpImplAccount;
typedef struct _XdpImplAccountIface XdpImplAccountIface;

struct _XdpImplAccountIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_get_user_information) (
    XdpImplAccount *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    GVariant *arg_options);

};

GType xdp_impl_account_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *xdp_impl_account_interface_info (void);
guint xdp_impl_account_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void xdp_impl_account_complete_get_user_information (
    XdpImplAccount *object,
    GDBusMethodInvocation *invocation,
    guint response,
    GVariant *results);



/* D-Bus method calls: */
void xdp_impl_account_call_get_user_information (
    XdpImplAccount *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean xdp_impl_account_call_get_user_information_finish (
    XdpImplAccount *proxy,
    guint *out_response,
    GVariant **out_results,
    GAsyncResult *res,
    GError **error);

gboolean xdp_impl_account_call_get_user_information_sync (
    XdpImplAccount *proxy,
    const gchar *arg_handle,
    const gchar *arg_app_id,
    const gchar *arg_window,
    GVariant *arg_options,
    guint *out_response,
    GVariant **out_results,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define XDP_IMPL_TYPE_ACCOUNT_PROXY (xdp_impl_account_proxy_get_type ())
#define XDP_IMPL_ACCOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCOUNT_PROXY, XdpImplAccountProxy))
#define XDP_IMPL_ACCOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_ACCOUNT_PROXY, XdpImplAccountProxyClass))
#define XDP_IMPL_ACCOUNT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_ACCOUNT_PROXY, XdpImplAccountProxyClass))
#define XDP_IMPL_IS_ACCOUNT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCOUNT_PROXY))
#define XDP_IMPL_IS_ACCOUNT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_ACCOUNT_PROXY))

typedef struct _XdpImplAccountProxy XdpImplAccountProxy;
typedef struct _XdpImplAccountProxyClass XdpImplAccountProxyClass;
typedef struct _XdpImplAccountProxyPrivate XdpImplAccountProxyPrivate;

struct _XdpImplAccountProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  XdpImplAccountProxyPrivate *priv;
};

struct _XdpImplAccountProxyClass
{
  GDBusProxyClass parent_class;
};

GType xdp_impl_account_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAccountProxy, g_object_unref)
#endif

void xdp_impl_account_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAccount *xdp_impl_account_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAccount *xdp_impl_account_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void xdp_impl_account_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
XdpImplAccount *xdp_impl_account_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
XdpImplAccount *xdp_impl_account_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define XDP_IMPL_TYPE_ACCOUNT_SKELETON (xdp_impl_account_skeleton_get_type ())
#define XDP_IMPL_ACCOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), XDP_IMPL_TYPE_ACCOUNT_SKELETON, XdpImplAccountSkeleton))
#define XDP_IMPL_ACCOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), XDP_IMPL_TYPE_ACCOUNT_SKELETON, XdpImplAccountSkeletonClass))
#define XDP_IMPL_ACCOUNT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), XDP_IMPL_TYPE_ACCOUNT_SKELETON, XdpImplAccountSkeletonClass))
#define XDP_IMPL_IS_ACCOUNT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), XDP_IMPL_TYPE_ACCOUNT_SKELETON))
#define XDP_IMPL_IS_ACCOUNT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), XDP_IMPL_TYPE_ACCOUNT_SKELETON))

typedef struct _XdpImplAccountSkeleton XdpImplAccountSkeleton;
typedef struct _XdpImplAccountSkeletonClass XdpImplAccountSkeletonClass;
typedef struct _XdpImplAccountSkeletonPrivate XdpImplAccountSkeletonPrivate;

struct _XdpImplAccountSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  XdpImplAccountSkeletonPrivate *priv;
};

struct _XdpImplAccountSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType xdp_impl_account_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (XdpImplAccountSkeleton, g_object_unref)
#endif

XdpImplAccount *xdp_impl_account_skeleton_new (void);


G_END_DECLS

#endif /* __SRC_XDG_DESKTOP_PORTAL_DBUS_H__ */
