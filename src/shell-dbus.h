/*
 * Generated by gdbus-codegen 2.51.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SRC_SHELL_DBUS_H__
#define __SRC_SHELL_DBUS_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.Shell.Screenshot */

#define TYPE_ORG_GNOME_SHELL_SCREENSHOT (org_gnome_shell_screenshot_get_type ())
#define ORG_GNOME_SHELL_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT, OrgGnomeShellScreenshot))
#define IS_ORG_GNOME_SHELL_SCREENSHOT(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT))
#define ORG_GNOME_SHELL_SCREENSHOT_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT, OrgGnomeShellScreenshotIface))

struct _OrgGnomeShellScreenshot;
typedef struct _OrgGnomeShellScreenshot OrgGnomeShellScreenshot;
typedef struct _OrgGnomeShellScreenshotIface OrgGnomeShellScreenshotIface;

struct _OrgGnomeShellScreenshotIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_flash_area) (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height);

  gboolean (*handle_screenshot) (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_area) (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_screenshot_window) (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename);

  gboolean (*handle_select_area) (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation);

};

GType org_gnome_shell_screenshot_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gnome_shell_screenshot_interface_info (void);
guint org_gnome_shell_screenshot_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_gnome_shell_screenshot_complete_screenshot (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void org_gnome_shell_screenshot_complete_screenshot_window (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void org_gnome_shell_screenshot_complete_screenshot_area (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gboolean success,
    const gchar *filename_used);

void org_gnome_shell_screenshot_complete_flash_area (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation);

void org_gnome_shell_screenshot_complete_select_area (
    OrgGnomeShellScreenshot *object,
    GDBusMethodInvocation *invocation,
    gint x,
    gint y,
    gint width,
    gint height);



/* D-Bus method calls: */
void org_gnome_shell_screenshot_call_screenshot (
    OrgGnomeShellScreenshot *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_shell_screenshot_call_screenshot_finish (
    OrgGnomeShellScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_shell_screenshot_call_screenshot_sync (
    OrgGnomeShellScreenshot *proxy,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void org_gnome_shell_screenshot_call_screenshot_window (
    OrgGnomeShellScreenshot *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_shell_screenshot_call_screenshot_window_finish (
    OrgGnomeShellScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_shell_screenshot_call_screenshot_window_sync (
    OrgGnomeShellScreenshot *proxy,
    gboolean arg_include_frame,
    gboolean arg_include_cursor,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void org_gnome_shell_screenshot_call_screenshot_area (
    OrgGnomeShellScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_shell_screenshot_call_screenshot_area_finish (
    OrgGnomeShellScreenshot *proxy,
    gboolean *out_success,
    gchar **out_filename_used,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_shell_screenshot_call_screenshot_area_sync (
    OrgGnomeShellScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    gboolean arg_flash,
    const gchar *arg_filename,
    gboolean *out_success,
    gchar **out_filename_used,
    GCancellable *cancellable,
    GError **error);

void org_gnome_shell_screenshot_call_flash_area (
    OrgGnomeShellScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_shell_screenshot_call_flash_area_finish (
    OrgGnomeShellScreenshot *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_shell_screenshot_call_flash_area_sync (
    OrgGnomeShellScreenshot *proxy,
    gint arg_x,
    gint arg_y,
    gint arg_width,
    gint arg_height,
    GCancellable *cancellable,
    GError **error);

void org_gnome_shell_screenshot_call_select_area (
    OrgGnomeShellScreenshot *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_shell_screenshot_call_select_area_finish (
    OrgGnomeShellScreenshot *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_shell_screenshot_call_select_area_sync (
    OrgGnomeShellScreenshot *proxy,
    gint *out_x,
    gint *out_y,
    gint *out_width,
    gint *out_height,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY (org_gnome_shell_screenshot_proxy_get_type ())
#define ORG_GNOME_SHELL_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY, OrgGnomeShellScreenshotProxy))
#define ORG_GNOME_SHELL_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY, OrgGnomeShellScreenshotProxyClass))
#define ORG_GNOME_SHELL_SCREENSHOT_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY, OrgGnomeShellScreenshotProxyClass))
#define IS_ORG_GNOME_SHELL_SCREENSHOT_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY))
#define IS_ORG_GNOME_SHELL_SCREENSHOT_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_SHELL_SCREENSHOT_PROXY))

typedef struct _OrgGnomeShellScreenshotProxy OrgGnomeShellScreenshotProxy;
typedef struct _OrgGnomeShellScreenshotProxyClass OrgGnomeShellScreenshotProxyClass;
typedef struct _OrgGnomeShellScreenshotProxyPrivate OrgGnomeShellScreenshotProxyPrivate;

struct _OrgGnomeShellScreenshotProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGnomeShellScreenshotProxyPrivate *priv;
};

struct _OrgGnomeShellScreenshotProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gnome_shell_screenshot_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeShellScreenshotProxy, g_object_unref)
#endif

void org_gnome_shell_screenshot_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeShellScreenshot *org_gnome_shell_screenshot_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeShellScreenshot *org_gnome_shell_screenshot_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gnome_shell_screenshot_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeShellScreenshot *org_gnome_shell_screenshot_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeShellScreenshot *org_gnome_shell_screenshot_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON (org_gnome_shell_screenshot_skeleton_get_type ())
#define ORG_GNOME_SHELL_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON, OrgGnomeShellScreenshotSkeleton))
#define ORG_GNOME_SHELL_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON, OrgGnomeShellScreenshotSkeletonClass))
#define ORG_GNOME_SHELL_SCREENSHOT_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON, OrgGnomeShellScreenshotSkeletonClass))
#define IS_ORG_GNOME_SHELL_SCREENSHOT_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON))
#define IS_ORG_GNOME_SHELL_SCREENSHOT_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_SHELL_SCREENSHOT_SKELETON))

typedef struct _OrgGnomeShellScreenshotSkeleton OrgGnomeShellScreenshotSkeleton;
typedef struct _OrgGnomeShellScreenshotSkeletonClass OrgGnomeShellScreenshotSkeletonClass;
typedef struct _OrgGnomeShellScreenshotSkeletonPrivate OrgGnomeShellScreenshotSkeletonPrivate;

struct _OrgGnomeShellScreenshotSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGnomeShellScreenshotSkeletonPrivate *priv;
};

struct _OrgGnomeShellScreenshotSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gnome_shell_screenshot_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeShellScreenshotSkeleton, g_object_unref)
#endif

OrgGnomeShellScreenshot *org_gnome_shell_screenshot_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.Notifications */

#define TYPE_ORG_GTK_NOTIFICATIONS (org_gtk_notifications_get_type ())
#define ORG_GTK_NOTIFICATIONS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GTK_NOTIFICATIONS, OrgGtkNotifications))
#define IS_ORG_GTK_NOTIFICATIONS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GTK_NOTIFICATIONS))
#define ORG_GTK_NOTIFICATIONS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GTK_NOTIFICATIONS, OrgGtkNotificationsIface))

struct _OrgGtkNotifications;
typedef struct _OrgGtkNotifications OrgGtkNotifications;
typedef struct _OrgGtkNotificationsIface OrgGtkNotificationsIface;

struct _OrgGtkNotificationsIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_add_notification) (
    OrgGtkNotifications *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification);

  gboolean (*handle_remove_notification) (
    OrgGtkNotifications *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_id);

};

GType org_gtk_notifications_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gtk_notifications_interface_info (void);
guint org_gtk_notifications_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_gtk_notifications_complete_add_notification (
    OrgGtkNotifications *object,
    GDBusMethodInvocation *invocation);

void org_gtk_notifications_complete_remove_notification (
    OrgGtkNotifications *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_gtk_notifications_call_add_notification (
    OrgGtkNotifications *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gtk_notifications_call_add_notification_finish (
    OrgGtkNotifications *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gtk_notifications_call_add_notification_sync (
    OrgGtkNotifications *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GVariant *arg_notification,
    GCancellable *cancellable,
    GError **error);

void org_gtk_notifications_call_remove_notification (
    OrgGtkNotifications *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gtk_notifications_call_remove_notification_finish (
    OrgGtkNotifications *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gtk_notifications_call_remove_notification_sync (
    OrgGtkNotifications *proxy,
    const gchar *arg_app_id,
    const gchar *arg_id,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_GTK_NOTIFICATIONS_PROXY (org_gtk_notifications_proxy_get_type ())
#define ORG_GTK_NOTIFICATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GTK_NOTIFICATIONS_PROXY, OrgGtkNotificationsProxy))
#define ORG_GTK_NOTIFICATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GTK_NOTIFICATIONS_PROXY, OrgGtkNotificationsProxyClass))
#define ORG_GTK_NOTIFICATIONS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GTK_NOTIFICATIONS_PROXY, OrgGtkNotificationsProxyClass))
#define IS_ORG_GTK_NOTIFICATIONS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GTK_NOTIFICATIONS_PROXY))
#define IS_ORG_GTK_NOTIFICATIONS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GTK_NOTIFICATIONS_PROXY))

typedef struct _OrgGtkNotificationsProxy OrgGtkNotificationsProxy;
typedef struct _OrgGtkNotificationsProxyClass OrgGtkNotificationsProxyClass;
typedef struct _OrgGtkNotificationsProxyPrivate OrgGtkNotificationsProxyPrivate;

struct _OrgGtkNotificationsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGtkNotificationsProxyPrivate *priv;
};

struct _OrgGtkNotificationsProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gtk_notifications_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGtkNotificationsProxy, g_object_unref)
#endif

void org_gtk_notifications_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGtkNotifications *org_gtk_notifications_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGtkNotifications *org_gtk_notifications_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gtk_notifications_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGtkNotifications *org_gtk_notifications_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGtkNotifications *org_gtk_notifications_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GTK_NOTIFICATIONS_SKELETON (org_gtk_notifications_skeleton_get_type ())
#define ORG_GTK_NOTIFICATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GTK_NOTIFICATIONS_SKELETON, OrgGtkNotificationsSkeleton))
#define ORG_GTK_NOTIFICATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GTK_NOTIFICATIONS_SKELETON, OrgGtkNotificationsSkeletonClass))
#define ORG_GTK_NOTIFICATIONS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GTK_NOTIFICATIONS_SKELETON, OrgGtkNotificationsSkeletonClass))
#define IS_ORG_GTK_NOTIFICATIONS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GTK_NOTIFICATIONS_SKELETON))
#define IS_ORG_GTK_NOTIFICATIONS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GTK_NOTIFICATIONS_SKELETON))

typedef struct _OrgGtkNotificationsSkeleton OrgGtkNotificationsSkeleton;
typedef struct _OrgGtkNotificationsSkeletonClass OrgGtkNotificationsSkeletonClass;
typedef struct _OrgGtkNotificationsSkeletonPrivate OrgGtkNotificationsSkeletonPrivate;

struct _OrgGtkNotificationsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGtkNotificationsSkeletonPrivate *priv;
};

struct _OrgGtkNotificationsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gtk_notifications_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGtkNotificationsSkeleton, g_object_unref)
#endif

OrgGtkNotifications *org_gtk_notifications_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.gnome.SessionManager */

#define TYPE_ORG_GNOME_SESSION_MANAGER (org_gnome_session_manager_get_type ())
#define ORG_GNOME_SESSION_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SESSION_MANAGER, OrgGnomeSessionManager))
#define IS_ORG_GNOME_SESSION_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SESSION_MANAGER))
#define ORG_GNOME_SESSION_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_GNOME_SESSION_MANAGER, OrgGnomeSessionManagerIface))

struct _OrgGnomeSessionManager;
typedef struct _OrgGnomeSessionManager OrgGnomeSessionManager;
typedef struct _OrgGnomeSessionManagerIface OrgGnomeSessionManagerIface;

struct _OrgGnomeSessionManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_can_shutdown) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_clients) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_inhibitors) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_locale) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    gint arg_category);

  gboolean (*handle_inhibit) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags);

  gboolean (*handle_initialization_error) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_message,
    gboolean arg_fatal);

  gboolean (*handle_is_autostart_condition_handled) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_condition);

  gboolean (*handle_is_inhibited) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_flags);

  gboolean (*handle_is_session_running) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_logout) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_mode);

  gboolean (*handle_reboot) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_register_client) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id);

  gboolean (*handle_setenv) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_variable,
    const gchar *arg_value);

  gboolean (*handle_shutdown) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_uninhibit) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_inhibit_cookie);

  gboolean (*handle_unregister_client) (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_client_id);

  guint  (*get_inhibited_actions) (OrgGnomeSessionManager *object);

  gboolean  (*get_session_is_active) (OrgGnomeSessionManager *object);

  const gchar * (*get_session_name) (OrgGnomeSessionManager *object);

  void (*client_added) (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

  void (*client_removed) (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

  void (*inhibitor_added) (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

  void (*inhibitor_removed) (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

  void (*session_over) (
    OrgGnomeSessionManager *object);

  void (*session_running) (
    OrgGnomeSessionManager *object);

};

GType org_gnome_session_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_gnome_session_manager_interface_info (void);
guint org_gnome_session_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_gnome_session_manager_complete_setenv (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_get_locale (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void org_gnome_session_manager_complete_initialization_error (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_register_client (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *client_id);

void org_gnome_session_manager_complete_unregister_client (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_inhibit (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    guint inhibit_cookie);

void org_gnome_session_manager_complete_uninhibit (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_is_inhibited (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    gboolean is_inhibited);

void org_gnome_session_manager_complete_get_clients (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *clients);

void org_gnome_session_manager_complete_get_inhibitors (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *inhibitors);

void org_gnome_session_manager_complete_is_autostart_condition_handled (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    gboolean handled);

void org_gnome_session_manager_complete_shutdown (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_reboot (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_can_shutdown (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    gboolean is_available);

void org_gnome_session_manager_complete_logout (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation);

void org_gnome_session_manager_complete_is_session_running (
    OrgGnomeSessionManager *object,
    GDBusMethodInvocation *invocation,
    gboolean running);



/* D-Bus signal emissions functions: */
void org_gnome_session_manager_emit_client_added (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

void org_gnome_session_manager_emit_client_removed (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

void org_gnome_session_manager_emit_inhibitor_added (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

void org_gnome_session_manager_emit_inhibitor_removed (
    OrgGnomeSessionManager *object,
    const gchar *arg_id);

void org_gnome_session_manager_emit_session_running (
    OrgGnomeSessionManager *object);

void org_gnome_session_manager_emit_session_over (
    OrgGnomeSessionManager *object);



/* D-Bus method calls: */
void org_gnome_session_manager_call_setenv (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_setenv_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_setenv_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_variable,
    const gchar *arg_value,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_get_locale (
    OrgGnomeSessionManager *proxy,
    gint arg_category,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_get_locale_finish (
    OrgGnomeSessionManager *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_get_locale_sync (
    OrgGnomeSessionManager *proxy,
    gint arg_category,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_initialization_error (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_message,
    gboolean arg_fatal,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_initialization_error_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_initialization_error_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_message,
    gboolean arg_fatal,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_register_client (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_register_client_finish (
    OrgGnomeSessionManager *proxy,
    gchar **out_client_id,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_register_client_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_app_id,
    const gchar *arg_client_startup_id,
    gchar **out_client_id,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_unregister_client (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_unregister_client_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_unregister_client_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_client_id,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_inhibit (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_inhibit_finish (
    OrgGnomeSessionManager *proxy,
    guint *out_inhibit_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_inhibit_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_app_id,
    guint arg_toplevel_xid,
    const gchar *arg_reason,
    guint arg_flags,
    guint *out_inhibit_cookie,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_uninhibit (
    OrgGnomeSessionManager *proxy,
    guint arg_inhibit_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_uninhibit_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_uninhibit_sync (
    OrgGnomeSessionManager *proxy,
    guint arg_inhibit_cookie,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_is_inhibited (
    OrgGnomeSessionManager *proxy,
    guint arg_flags,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_is_inhibited_finish (
    OrgGnomeSessionManager *proxy,
    gboolean *out_is_inhibited,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_is_inhibited_sync (
    OrgGnomeSessionManager *proxy,
    guint arg_flags,
    gboolean *out_is_inhibited,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_get_clients (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_get_clients_finish (
    OrgGnomeSessionManager *proxy,
    gchar ***out_clients,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_get_clients_sync (
    OrgGnomeSessionManager *proxy,
    gchar ***out_clients,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_get_inhibitors (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_get_inhibitors_finish (
    OrgGnomeSessionManager *proxy,
    gchar ***out_inhibitors,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_get_inhibitors_sync (
    OrgGnomeSessionManager *proxy,
    gchar ***out_inhibitors,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_is_autostart_condition_handled (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_condition,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_is_autostart_condition_handled_finish (
    OrgGnomeSessionManager *proxy,
    gboolean *out_handled,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_is_autostart_condition_handled_sync (
    OrgGnomeSessionManager *proxy,
    const gchar *arg_condition,
    gboolean *out_handled,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_shutdown (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_shutdown_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_shutdown_sync (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_reboot (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_reboot_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_reboot_sync (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_can_shutdown (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_can_shutdown_finish (
    OrgGnomeSessionManager *proxy,
    gboolean *out_is_available,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_can_shutdown_sync (
    OrgGnomeSessionManager *proxy,
    gboolean *out_is_available,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_logout (
    OrgGnomeSessionManager *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_logout_finish (
    OrgGnomeSessionManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_logout_sync (
    OrgGnomeSessionManager *proxy,
    guint arg_mode,
    GCancellable *cancellable,
    GError **error);

void org_gnome_session_manager_call_is_session_running (
    OrgGnomeSessionManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_gnome_session_manager_call_is_session_running_finish (
    OrgGnomeSessionManager *proxy,
    gboolean *out_running,
    GAsyncResult *res,
    GError **error);

gboolean org_gnome_session_manager_call_is_session_running_sync (
    OrgGnomeSessionManager *proxy,
    gboolean *out_running,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_gnome_session_manager_get_session_name (OrgGnomeSessionManager *object);
gchar *org_gnome_session_manager_dup_session_name (OrgGnomeSessionManager *object);
void org_gnome_session_manager_set_session_name (OrgGnomeSessionManager *object, const gchar *value);

gboolean org_gnome_session_manager_get_session_is_active (OrgGnomeSessionManager *object);
void org_gnome_session_manager_set_session_is_active (OrgGnomeSessionManager *object, gboolean value);

guint org_gnome_session_manager_get_inhibited_actions (OrgGnomeSessionManager *object);
void org_gnome_session_manager_set_inhibited_actions (OrgGnomeSessionManager *object, guint value);


/* ---- */

#define TYPE_ORG_GNOME_SESSION_MANAGER_PROXY (org_gnome_session_manager_proxy_get_type ())
#define ORG_GNOME_SESSION_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SESSION_MANAGER_PROXY, OrgGnomeSessionManagerProxy))
#define ORG_GNOME_SESSION_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_SESSION_MANAGER_PROXY, OrgGnomeSessionManagerProxyClass))
#define ORG_GNOME_SESSION_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_SESSION_MANAGER_PROXY, OrgGnomeSessionManagerProxyClass))
#define IS_ORG_GNOME_SESSION_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SESSION_MANAGER_PROXY))
#define IS_ORG_GNOME_SESSION_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_SESSION_MANAGER_PROXY))

typedef struct _OrgGnomeSessionManagerProxy OrgGnomeSessionManagerProxy;
typedef struct _OrgGnomeSessionManagerProxyClass OrgGnomeSessionManagerProxyClass;
typedef struct _OrgGnomeSessionManagerProxyPrivate OrgGnomeSessionManagerProxyPrivate;

struct _OrgGnomeSessionManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgGnomeSessionManagerProxyPrivate *priv;
};

struct _OrgGnomeSessionManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_gnome_session_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeSessionManagerProxy, g_object_unref)
#endif

void org_gnome_session_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeSessionManager *org_gnome_session_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeSessionManager *org_gnome_session_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_gnome_session_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgGnomeSessionManager *org_gnome_session_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgGnomeSessionManager *org_gnome_session_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON (org_gnome_session_manager_skeleton_get_type ())
#define ORG_GNOME_SESSION_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON, OrgGnomeSessionManagerSkeleton))
#define ORG_GNOME_SESSION_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON, OrgGnomeSessionManagerSkeletonClass))
#define ORG_GNOME_SESSION_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON, OrgGnomeSessionManagerSkeletonClass))
#define IS_ORG_GNOME_SESSION_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON))
#define IS_ORG_GNOME_SESSION_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_GNOME_SESSION_MANAGER_SKELETON))

typedef struct _OrgGnomeSessionManagerSkeleton OrgGnomeSessionManagerSkeleton;
typedef struct _OrgGnomeSessionManagerSkeletonClass OrgGnomeSessionManagerSkeletonClass;
typedef struct _OrgGnomeSessionManagerSkeletonPrivate OrgGnomeSessionManagerSkeletonPrivate;

struct _OrgGnomeSessionManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgGnomeSessionManagerSkeletonPrivate *priv;
};

struct _OrgGnomeSessionManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_gnome_session_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgGnomeSessionManagerSkeleton, g_object_unref)
#endif

OrgGnomeSessionManager *org_gnome_session_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.ScreenSaver */

#define TYPE_ORG_FREEDESKTOP_SCREEN_SAVER (org_freedesktop_screen_saver_get_type ())
#define ORG_FREEDESKTOP_SCREEN_SAVER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER, OrgFreedesktopScreenSaver))
#define IS_ORG_FREEDESKTOP_SCREEN_SAVER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER))
#define ORG_FREEDESKTOP_SCREEN_SAVER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER, OrgFreedesktopScreenSaverIface))

struct _OrgFreedesktopScreenSaver;
typedef struct _OrgFreedesktopScreenSaver OrgFreedesktopScreenSaver;
typedef struct _OrgFreedesktopScreenSaverIface OrgFreedesktopScreenSaverIface;

struct _OrgFreedesktopScreenSaverIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_active) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_active_time) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_session_idle_time) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_inhibit) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit);

  gboolean (*handle_lock) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_active) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_e);

  gboolean (*handle_simulate_user_activity) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_throttle) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit);

  gboolean (*handle_un_inhibit) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint arg_cookie);

  gboolean (*handle_un_throttle) (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint arg_cookie);

  void (*active_changed) (
    OrgFreedesktopScreenSaver *object,
    gboolean arg_unnamed_arg0);

};

GType org_freedesktop_screen_saver_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_screen_saver_interface_info (void);
guint org_freedesktop_screen_saver_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_screen_saver_complete_lock (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_screen_saver_complete_simulate_user_activity (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_screen_saver_complete_get_active (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg0);

void org_freedesktop_screen_saver_complete_get_active_time (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint seconds);

void org_freedesktop_screen_saver_complete_get_session_idle_time (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint seconds);

void org_freedesktop_screen_saver_complete_set_active (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    gboolean unnamed_arg1);

void org_freedesktop_screen_saver_complete_inhibit (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint cookie);

void org_freedesktop_screen_saver_complete_un_inhibit (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_screen_saver_complete_throttle (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation,
    guint cookie);

void org_freedesktop_screen_saver_complete_un_throttle (
    OrgFreedesktopScreenSaver *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_screen_saver_emit_active_changed (
    OrgFreedesktopScreenSaver *object,
    gboolean arg_unnamed_arg0);



/* D-Bus method calls: */
void org_freedesktop_screen_saver_call_lock (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_lock_finish (
    OrgFreedesktopScreenSaver *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_lock_sync (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_simulate_user_activity (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_simulate_user_activity_finish (
    OrgFreedesktopScreenSaver *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_simulate_user_activity_sync (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_get_active (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_get_active_finish (
    OrgFreedesktopScreenSaver *proxy,
    gboolean *out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_get_active_sync (
    OrgFreedesktopScreenSaver *proxy,
    gboolean *out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_get_active_time (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_get_active_time_finish (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_seconds,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_get_active_time_sync (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_seconds,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_get_session_idle_time (
    OrgFreedesktopScreenSaver *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_get_session_idle_time_finish (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_seconds,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_get_session_idle_time_sync (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_seconds,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_set_active (
    OrgFreedesktopScreenSaver *proxy,
    gboolean arg_e,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_set_active_finish (
    OrgFreedesktopScreenSaver *proxy,
    gboolean *out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_set_active_sync (
    OrgFreedesktopScreenSaver *proxy,
    gboolean arg_e,
    gboolean *out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_inhibit (
    OrgFreedesktopScreenSaver *proxy,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_inhibit_finish (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_inhibit_sync (
    OrgFreedesktopScreenSaver *proxy,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit,
    guint *out_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_un_inhibit (
    OrgFreedesktopScreenSaver *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_un_inhibit_finish (
    OrgFreedesktopScreenSaver *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_un_inhibit_sync (
    OrgFreedesktopScreenSaver *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_throttle (
    OrgFreedesktopScreenSaver *proxy,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_throttle_finish (
    OrgFreedesktopScreenSaver *proxy,
    guint *out_cookie,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_throttle_sync (
    OrgFreedesktopScreenSaver *proxy,
    const gchar *arg_application_name,
    const gchar *arg_reason_for_inhibit,
    guint *out_cookie,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_screen_saver_call_un_throttle (
    OrgFreedesktopScreenSaver *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_screen_saver_call_un_throttle_finish (
    OrgFreedesktopScreenSaver *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_screen_saver_call_un_throttle_sync (
    OrgFreedesktopScreenSaver *proxy,
    guint arg_cookie,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY (org_freedesktop_screen_saver_proxy_get_type ())
#define ORG_FREEDESKTOP_SCREEN_SAVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY, OrgFreedesktopScreenSaverProxy))
#define ORG_FREEDESKTOP_SCREEN_SAVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY, OrgFreedesktopScreenSaverProxyClass))
#define ORG_FREEDESKTOP_SCREEN_SAVER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY, OrgFreedesktopScreenSaverProxyClass))
#define IS_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY))
#define IS_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_PROXY))

typedef struct _OrgFreedesktopScreenSaverProxy OrgFreedesktopScreenSaverProxy;
typedef struct _OrgFreedesktopScreenSaverProxyClass OrgFreedesktopScreenSaverProxyClass;
typedef struct _OrgFreedesktopScreenSaverProxyPrivate OrgFreedesktopScreenSaverProxyPrivate;

struct _OrgFreedesktopScreenSaverProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopScreenSaverProxyPrivate *priv;
};

struct _OrgFreedesktopScreenSaverProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_screen_saver_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopScreenSaverProxy, g_object_unref)
#endif

void org_freedesktop_screen_saver_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopScreenSaver *org_freedesktop_screen_saver_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopScreenSaver *org_freedesktop_screen_saver_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_screen_saver_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopScreenSaver *org_freedesktop_screen_saver_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopScreenSaver *org_freedesktop_screen_saver_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON (org_freedesktop_screen_saver_skeleton_get_type ())
#define ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON, OrgFreedesktopScreenSaverSkeleton))
#define ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON, OrgFreedesktopScreenSaverSkeletonClass))
#define ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON, OrgFreedesktopScreenSaverSkeletonClass))
#define IS_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON))
#define IS_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_SCREEN_SAVER_SKELETON))

typedef struct _OrgFreedesktopScreenSaverSkeleton OrgFreedesktopScreenSaverSkeleton;
typedef struct _OrgFreedesktopScreenSaverSkeletonClass OrgFreedesktopScreenSaverSkeletonClass;
typedef struct _OrgFreedesktopScreenSaverSkeletonPrivate OrgFreedesktopScreenSaverSkeletonPrivate;

struct _OrgFreedesktopScreenSaverSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopScreenSaverSkeletonPrivate *priv;
};

struct _OrgFreedesktopScreenSaverSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_screen_saver_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopScreenSaverSkeleton, g_object_unref)
#endif

OrgFreedesktopScreenSaver *org_freedesktop_screen_saver_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Accounts */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS (org_freedesktop_accounts_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS, OrgFreedesktopAccounts))
#define IS_ORG_FREEDESKTOP_ACCOUNTS(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS))
#define ORG_FREEDESKTOP_ACCOUNTS_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS, OrgFreedesktopAccountsIface))

struct _OrgFreedesktopAccounts;
typedef struct _OrgFreedesktopAccounts OrgFreedesktopAccounts;
typedef struct _OrgFreedesktopAccountsIface OrgFreedesktopAccountsIface;

struct _OrgFreedesktopAccountsIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_cache_user) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_create_user) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType);

  gboolean (*handle_delete_user) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id,
    gboolean arg_removeFiles);

  gboolean (*handle_find_user_by_id) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_id);

  gboolean (*handle_find_user_by_name) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_list_cached_users) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_uncache_user) (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  const gchar * (*get_daemon_version) (OrgFreedesktopAccounts *object);

  void (*user_added) (
    OrgFreedesktopAccounts *object,
    const gchar *arg_user);

  void (*user_deleted) (
    OrgFreedesktopAccounts *object,
    const gchar *arg_user);

};

GType org_freedesktop_accounts_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_accounts_interface_info (void);
guint org_freedesktop_accounts_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_accounts_complete_list_cached_users (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *users);

void org_freedesktop_accounts_complete_find_user_by_id (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void org_freedesktop_accounts_complete_find_user_by_name (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void org_freedesktop_accounts_complete_create_user (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void org_freedesktop_accounts_complete_cache_user (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation,
    const gchar *user);

void org_freedesktop_accounts_complete_uncache_user (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_complete_delete_user (
    OrgFreedesktopAccounts *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_accounts_emit_user_added (
    OrgFreedesktopAccounts *object,
    const gchar *arg_user);

void org_freedesktop_accounts_emit_user_deleted (
    OrgFreedesktopAccounts *object,
    const gchar *arg_user);



/* D-Bus method calls: */
void org_freedesktop_accounts_call_list_cached_users (
    OrgFreedesktopAccounts *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_list_cached_users_finish (
    OrgFreedesktopAccounts *proxy,
    gchar ***out_users,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_list_cached_users_sync (
    OrgFreedesktopAccounts *proxy,
    gchar ***out_users,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_find_user_by_id (
    OrgFreedesktopAccounts *proxy,
    gint64 arg_id,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_find_user_by_id_finish (
    OrgFreedesktopAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_find_user_by_id_sync (
    OrgFreedesktopAccounts *proxy,
    gint64 arg_id,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_find_user_by_name (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_find_user_by_name_finish (
    OrgFreedesktopAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_find_user_by_name_sync (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_create_user (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_create_user_finish (
    OrgFreedesktopAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_create_user_sync (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    const gchar *arg_fullname,
    gint arg_accountType,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_cache_user (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_cache_user_finish (
    OrgFreedesktopAccounts *proxy,
    gchar **out_user,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_cache_user_sync (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    gchar **out_user,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_uncache_user (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_uncache_user_finish (
    OrgFreedesktopAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_uncache_user_sync (
    OrgFreedesktopAccounts *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_call_delete_user (
    OrgFreedesktopAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_call_delete_user_finish (
    OrgFreedesktopAccounts *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_call_delete_user_sync (
    OrgFreedesktopAccounts *proxy,
    gint64 arg_id,
    gboolean arg_removeFiles,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_freedesktop_accounts_get_daemon_version (OrgFreedesktopAccounts *object);
gchar *org_freedesktop_accounts_dup_daemon_version (OrgFreedesktopAccounts *object);
void org_freedesktop_accounts_set_daemon_version (OrgFreedesktopAccounts *object, const gchar *value);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY (org_freedesktop_accounts_proxy_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY, OrgFreedesktopAccountsProxy))
#define ORG_FREEDESKTOP_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY, OrgFreedesktopAccountsProxyClass))
#define ORG_FREEDESKTOP_ACCOUNTS_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY, OrgFreedesktopAccountsProxyClass))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_PROXY))

typedef struct _OrgFreedesktopAccountsProxy OrgFreedesktopAccountsProxy;
typedef struct _OrgFreedesktopAccountsProxyClass OrgFreedesktopAccountsProxyClass;
typedef struct _OrgFreedesktopAccountsProxyPrivate OrgFreedesktopAccountsProxyPrivate;

struct _OrgFreedesktopAccountsProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopAccountsProxyPrivate *priv;
};

struct _OrgFreedesktopAccountsProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_accounts_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopAccountsProxy, g_object_unref)
#endif

void org_freedesktop_accounts_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopAccounts *org_freedesktop_accounts_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopAccounts *org_freedesktop_accounts_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_accounts_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopAccounts *org_freedesktop_accounts_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopAccounts *org_freedesktop_accounts_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON (org_freedesktop_accounts_skeleton_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON, OrgFreedesktopAccountsSkeleton))
#define ORG_FREEDESKTOP_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON, OrgFreedesktopAccountsSkeletonClass))
#define ORG_FREEDESKTOP_ACCOUNTS_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON, OrgFreedesktopAccountsSkeletonClass))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_SKELETON))

typedef struct _OrgFreedesktopAccountsSkeleton OrgFreedesktopAccountsSkeleton;
typedef struct _OrgFreedesktopAccountsSkeletonClass OrgFreedesktopAccountsSkeletonClass;
typedef struct _OrgFreedesktopAccountsSkeletonPrivate OrgFreedesktopAccountsSkeletonPrivate;

struct _OrgFreedesktopAccountsSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopAccountsSkeletonPrivate *priv;
};

struct _OrgFreedesktopAccountsSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_accounts_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopAccountsSkeleton, g_object_unref)
#endif

OrgFreedesktopAccounts *org_freedesktop_accounts_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.Accounts.User */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER (org_freedesktop_accounts_user_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS_USER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER, OrgFreedesktopAccountsUser))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_USER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER))
#define ORG_FREEDESKTOP_ACCOUNTS_USER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER, OrgFreedesktopAccountsUserIface))

struct _OrgFreedesktopAccountsUser;
typedef struct _OrgFreedesktopAccountsUser OrgFreedesktopAccountsUser;
typedef struct _OrgFreedesktopAccountsUserIface OrgFreedesktopAccountsUserIface;

struct _OrgFreedesktopAccountsUserIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_set_account_type) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    gint arg_accountType);

  gboolean (*handle_set_automatic_login) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_enabled);

  gboolean (*handle_set_email) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_email);

  gboolean (*handle_set_home_directory) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_homedir);

  gboolean (*handle_set_icon_file) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_filename);

  gboolean (*handle_set_language) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_language);

  gboolean (*handle_set_location) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_location);

  gboolean (*handle_set_locked) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_locked);

  gboolean (*handle_set_password) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_password,
    const gchar *arg_hint);

  gboolean (*handle_set_password_hint) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_hint);

  gboolean (*handle_set_password_mode) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    gint arg_mode);

  gboolean (*handle_set_real_name) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_set_shell) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_shell);

  gboolean (*handle_set_user_name) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  gboolean (*handle_set_xsession) (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_x_session);

  gint  (*get_account_type) (OrgFreedesktopAccountsUser *object);

  gboolean  (*get_automatic_login) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_email) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_home_directory) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_icon_file) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_language) (OrgFreedesktopAccountsUser *object);

  gboolean  (*get_local_account) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_location) (OrgFreedesktopAccountsUser *object);

  gboolean  (*get_locked) (OrgFreedesktopAccountsUser *object);

  guint64  (*get_login_frequency) (OrgFreedesktopAccountsUser *object);

  GVariant * (*get_login_history) (OrgFreedesktopAccountsUser *object);

  gint64  (*get_login_time) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_password_hint) (OrgFreedesktopAccountsUser *object);

  gint  (*get_password_mode) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_real_name) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_shell) (OrgFreedesktopAccountsUser *object);

  gboolean  (*get_system_account) (OrgFreedesktopAccountsUser *object);

  guint64  (*get_uid) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_user_name) (OrgFreedesktopAccountsUser *object);

  const gchar * (*get_xsession) (OrgFreedesktopAccountsUser *object);

  void (*changed) (
    OrgFreedesktopAccountsUser *object);

};

GType org_freedesktop_accounts_user_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_accounts_user_interface_info (void);
guint org_freedesktop_accounts_user_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_accounts_user_complete_set_user_name (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_real_name (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_email (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_language (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_xsession (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_location (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_home_directory (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_shell (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_icon_file (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_locked (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_account_type (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_password_mode (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_password (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_password_hint (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_accounts_user_complete_set_automatic_login (
    OrgFreedesktopAccountsUser *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void org_freedesktop_accounts_user_emit_changed (
    OrgFreedesktopAccountsUser *object);



/* D-Bus method calls: */
void org_freedesktop_accounts_user_call_set_user_name (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_user_name_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_user_name_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_real_name (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_real_name_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_real_name_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_email (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_email,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_email_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_email_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_email,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_language (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_language,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_language_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_language_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_language,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_xsession (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_x_session,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_xsession_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_xsession_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_x_session,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_location (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_location,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_location_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_location_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_location,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_home_directory (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_homedir,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_home_directory_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_home_directory_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_homedir,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_shell (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_shell,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_shell_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_shell_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_shell,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_icon_file (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_icon_file_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_icon_file_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_filename,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_locked (
    OrgFreedesktopAccountsUser *proxy,
    gboolean arg_locked,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_locked_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_locked_sync (
    OrgFreedesktopAccountsUser *proxy,
    gboolean arg_locked,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_account_type (
    OrgFreedesktopAccountsUser *proxy,
    gint arg_accountType,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_account_type_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_account_type_sync (
    OrgFreedesktopAccountsUser *proxy,
    gint arg_accountType,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_password_mode (
    OrgFreedesktopAccountsUser *proxy,
    gint arg_mode,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_password_mode_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_password_mode_sync (
    OrgFreedesktopAccountsUser *proxy,
    gint arg_mode,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_password (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_password,
    const gchar *arg_hint,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_password_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_password_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_password,
    const gchar *arg_hint,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_password_hint (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_hint,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_password_hint_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_password_hint_sync (
    OrgFreedesktopAccountsUser *proxy,
    const gchar *arg_hint,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_accounts_user_call_set_automatic_login (
    OrgFreedesktopAccountsUser *proxy,
    gboolean arg_enabled,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_accounts_user_call_set_automatic_login_finish (
    OrgFreedesktopAccountsUser *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_accounts_user_call_set_automatic_login_sync (
    OrgFreedesktopAccountsUser *proxy,
    gboolean arg_enabled,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint64 org_freedesktop_accounts_user_get_uid (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_uid (OrgFreedesktopAccountsUser *object, guint64 value);

const gchar *org_freedesktop_accounts_user_get_user_name (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_user_name (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_user_name (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_real_name (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_real_name (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_real_name (OrgFreedesktopAccountsUser *object, const gchar *value);

gint org_freedesktop_accounts_user_get_account_type (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_account_type (OrgFreedesktopAccountsUser *object, gint value);

const gchar *org_freedesktop_accounts_user_get_home_directory (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_home_directory (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_home_directory (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_shell (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_shell (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_shell (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_email (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_email (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_email (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_language (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_language (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_language (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_xsession (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_xsession (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_xsession (OrgFreedesktopAccountsUser *object, const gchar *value);

const gchar *org_freedesktop_accounts_user_get_location (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_location (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_location (OrgFreedesktopAccountsUser *object, const gchar *value);

guint64 org_freedesktop_accounts_user_get_login_frequency (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_login_frequency (OrgFreedesktopAccountsUser *object, guint64 value);

gint64 org_freedesktop_accounts_user_get_login_time (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_login_time (OrgFreedesktopAccountsUser *object, gint64 value);

GVariant *org_freedesktop_accounts_user_get_login_history (OrgFreedesktopAccountsUser *object);
GVariant *org_freedesktop_accounts_user_dup_login_history (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_login_history (OrgFreedesktopAccountsUser *object, GVariant *value);

const gchar *org_freedesktop_accounts_user_get_icon_file (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_icon_file (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_icon_file (OrgFreedesktopAccountsUser *object, const gchar *value);

gboolean org_freedesktop_accounts_user_get_locked (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_locked (OrgFreedesktopAccountsUser *object, gboolean value);

gint org_freedesktop_accounts_user_get_password_mode (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_password_mode (OrgFreedesktopAccountsUser *object, gint value);

const gchar *org_freedesktop_accounts_user_get_password_hint (OrgFreedesktopAccountsUser *object);
gchar *org_freedesktop_accounts_user_dup_password_hint (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_password_hint (OrgFreedesktopAccountsUser *object, const gchar *value);

gboolean org_freedesktop_accounts_user_get_automatic_login (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_automatic_login (OrgFreedesktopAccountsUser *object, gboolean value);

gboolean org_freedesktop_accounts_user_get_system_account (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_system_account (OrgFreedesktopAccountsUser *object, gboolean value);

gboolean org_freedesktop_accounts_user_get_local_account (OrgFreedesktopAccountsUser *object);
void org_freedesktop_accounts_user_set_local_account (OrgFreedesktopAccountsUser *object, gboolean value);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY (org_freedesktop_accounts_user_proxy_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY, OrgFreedesktopAccountsUserProxy))
#define ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY, OrgFreedesktopAccountsUserProxyClass))
#define ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY, OrgFreedesktopAccountsUserProxyClass))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_PROXY))

typedef struct _OrgFreedesktopAccountsUserProxy OrgFreedesktopAccountsUserProxy;
typedef struct _OrgFreedesktopAccountsUserProxyClass OrgFreedesktopAccountsUserProxyClass;
typedef struct _OrgFreedesktopAccountsUserProxyPrivate OrgFreedesktopAccountsUserProxyPrivate;

struct _OrgFreedesktopAccountsUserProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopAccountsUserProxyPrivate *priv;
};

struct _OrgFreedesktopAccountsUserProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_accounts_user_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopAccountsUserProxy, g_object_unref)
#endif

void org_freedesktop_accounts_user_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopAccountsUser *org_freedesktop_accounts_user_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopAccountsUser *org_freedesktop_accounts_user_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_accounts_user_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopAccountsUser *org_freedesktop_accounts_user_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopAccountsUser *org_freedesktop_accounts_user_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON (org_freedesktop_accounts_user_skeleton_get_type ())
#define ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON, OrgFreedesktopAccountsUserSkeleton))
#define ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON, OrgFreedesktopAccountsUserSkeletonClass))
#define ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON, OrgFreedesktopAccountsUserSkeletonClass))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON))
#define IS_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_ACCOUNTS_USER_SKELETON))

typedef struct _OrgFreedesktopAccountsUserSkeleton OrgFreedesktopAccountsUserSkeleton;
typedef struct _OrgFreedesktopAccountsUserSkeletonClass OrgFreedesktopAccountsUserSkeletonClass;
typedef struct _OrgFreedesktopAccountsUserSkeletonPrivate OrgFreedesktopAccountsUserSkeletonPrivate;

struct _OrgFreedesktopAccountsUserSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopAccountsUserSkeletonPrivate *priv;
};

struct _OrgFreedesktopAccountsUserSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_accounts_user_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopAccountsUserSkeleton, g_object_unref)
#endif

OrgFreedesktopAccountsUser *org_freedesktop_accounts_user_skeleton_new (void);


G_END_DECLS

#endif /* __SRC_SHELL_DBUS_H__ */
